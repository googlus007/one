using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Security.Claims;
using System.IO;
using System.Collections;

namespace Reflection_12_
{
    class Program
    {
        static void Main(string[] args)
        {
            Reflector.OutInFile(typeof(Student));
            Console.WriteLine();
            Reflector.OutInFile(typeof(Stack<Student>));
        }
    }

    public class Set<T> : ISet<T> where T : class
    {
        private T[] set;
        private int maxIndex;

        public Set()
        {
            set = new T[10];
            maxIndex = 0;
        }

        public Set(int count)
        {
            set = new T[count];
            maxIndex = 0;
        }

        public void put(T element)
        {
            for (int i = 0; i < set.Length; i++)
            {
                if (set[i] == element)
                {
                    Console.WriteLine("Элемент уже существует");
                    break;
                }
                else
                {
                    set[maxIndex++] = element;
                    break;
                }
            }
        }

        public void delete(T element)
        {
            for (int i = 0; i < set.Length; i++)
            {
                if (set[i] == element)
                {
                    for (int j = i; j < set.Length - 1; j++)
                    {
                        set[j] = set[j + 1];
                    }
                    maxIndex--;
                    break;
                }
            }
        }

        public void Show()
        {
            for (int i = 0; i < maxIndex; i++)
            {
                Console.WriteLine("[" + i + "] - " + set[i]);
            }
        }

        public T this[int index]
        {
            get
            {
                return set[index];
            }
            set
            {
                set[index] = value;
            }
        }

    }

    interface ISet<T> //Интерфейс обобщенный. Обобщенный, говорит о том, что он может работать с любыми типами.
    {
        void put(T element);
        void delete(T element);
        void Show();
    }

    class Student: IComparable, IEnumerable
    {
        private string name;
        private int age;
        private string studentTicket;

        public string Name
        {
            set { this.name = value; }
            get { return name; }
        }

        public int Age
        {
            set { this.age = value; }
            get { return age; }
        }

        public string StudentTicket
        {
            set { this.studentTicket = value; }
            get { return studentTicket; }
        }

        public Student(string name, int age, string studentTicket)
        {
            this.name = name;
            this.age = age;
            this.studentTicket = studentTicket;
        }

        public override bool Equals(object obj)
        {
            return (this.StudentTicket == ((Student)obj).StudentTicket);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override string ToString()
        {
            string str = "ФИО: " + this.name + " Возраст: " + this.age + " Номер билета: " + this.studentTicket;
            return str;
        }

        public int CompareTo(object obj)
        {
            return studentTicket.CompareTo(obj);
        }

        public IEnumerator GetEnumerator()
        {
            return ((IEnumerable)studentTicket).GetEnumerator();
        }
    }

    public static class Reflector
    {
        public static void OutInFile(Type type)
        {
            string text = "";
            using (StreamWriter sw = new StreamWriter("D:\\result.txt", true, System.Text.Encoding.Default))
            {
                Console.WriteLine("Поля:");
                text += "Поля: " + "\n";
                foreach (FieldInfo field in type.GetFields())
                {
                    Console.WriteLine("{0} {1}", field.FieldType, field.Name);
                    text += field.FieldType + " " + field.Name + "\n";
                }

                Console.WriteLine("Свойства:");
                text += "Свойства: \n";
                foreach (PropertyInfo prop in type.GetProperties())
                {
                    Console.WriteLine("{0} {1}", prop.PropertyType, prop.Name);
                    text += prop.PropertyType + " " + prop.Name + "\n";

                }

                Console.WriteLine("Конструкторы:");
                text += "Конструкторы: \n";
                foreach (ConstructorInfo ctor in type.GetConstructors())
                {
                    Console.Write(type.Name + " (");
                    text += " (";
                    // получаем параметры конструктора
                    ParameterInfo[] parameters = ctor.GetParameters();
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        Console.Write(parameters[i].ParameterType.Name + " " + parameters[i].Name);
                        text += parameters[i].ParameterType.Name + " " + parameters[i].Name;
                        if (i + 1 < parameters.Length)
                        {
                            Console.Write(", ");
                            text += ", ";
                        }
                    }
                    Console.WriteLine(")");
                    text += ")\n";
                }

                Console.WriteLine("Методы:");
                text += "Методы: \n";
                foreach (MethodInfo method in type.GetMethods())
                {
                    string modificator = "";
                    if (method.IsStatic)
                        modificator += "static ";
                    if (method.IsVirtual)
                        modificator += "virtual ";
                    Console.Write(modificator + method.ReturnType.Name + " " + method.Name + " (");
                    text += modificator + method.ReturnType.Name + " " + method.Name + " (";
                    //получаем все параметры
                    ParameterInfo[] parameters = method.GetParameters();
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        Console.Write(parameters[i].ParameterType.Name + " " + parameters[i].Name);
                        text += parameters[i].ParameterType.Name + " " + parameters[i].Name;
                        if (i + 1 < parameters.Length)
                        {
                            Console.Write(", ");
                            text += ", ";
                        }
                    }
                    Console.WriteLine(")");
                    text += ")\n";
                }

                Console.WriteLine("Реализованные интерфейсы: ");
                text += "Реализованные интерфейсы: \n";
                foreach (Type i in type.GetInterfaces())
                {
                    Console.WriteLine(i.Name);
                    text += i.Name + "\n";
                }
                text += "\n";
                sw.WriteLine(text);
            }
        }
    }
}