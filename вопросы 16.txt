1. Что такое TPL? Как и для чего используется тип Task

Библиотека параллельных задач TPL (Task Parallel Library)

позволяет распараллелить задачи и выполнять их сразу на нескольких процессорах (для создания многопоточных приложений).

Task описывает отдельную продолжительную операцию, которая запускается асинхронно в одном из потоков из пула потоков (можно запускать синхронно в текущем потоке) – подобна потокам, но абстракция более высокого уровня.

2. Почему эффект от распараллеливания наблюдается на большом количестве элементов?

3. В чем основные достоинства работы с задачами по сравнению с потокми?

4. Приведите три способа создания и/или запуска Task?

5. Как и для чего используют методы Wait(), WaitAll() и WaitAny()?

6. Приведите пример синхронного запуска Task?

7. Как создать задачу с возвратом результата?

8. Как обработать исключение, если оно произошло при выполнении Task?

9. Что такое CancellationToken и как с его помощью отменить выполнение задач?

10. Как организовать задачу продолжения (continuation task) ?

11. Как и для чего используется объект ожидания при создании задач продолжения?

12. Поясните назначение класса System.Threading.Tasks.Parallel?

13. Приведите пример задачи с Parallel.For(int, int, Action<int>)

14. Приведите пример задачи с Parallel.ForEach

15. Приведите пример с Parallel.Invoke()

16. Как с использованием CancellationToken отменить параллельные операции?

17. Для чего используют BlockingCollection<T>, в чем ее особенность?

18. Как используя async и await организовать асинхронное выполенение метода?